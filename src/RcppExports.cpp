// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

#include <iostream>
#include <string>
#include <stdio.h>
#include <time.h>

#define RCPP_ARMADILLO_FIX_Field

using namespace Rcpp;
using namespace arma;
using namespace std;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test
List test(arma::vec v);
RcppExport SEXP _RHD_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(test(v));
    return rcpp_result_gen;
END_RCPP
}
// f_nd
arma::vec f_nd(arma::vec& tGrid);
RcppExport SEXP _RHD_f_nd(SEXP tGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    rcpp_result_gen = Rcpp::wrap(f_nd(tGrid));
    return rcpp_result_gen;
END_RCPP
}
// f_nd_each
double f_nd_each(double t);
RcppExport SEXP _RHD_f_nd_each(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(f_nd_each(t));
    return rcpp_result_gen;
END_RCPP
}
// IQRout
List IQRout(arma::vec& x, double f);
RcppExport SEXP _RHD_IQRout(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(IQRout(x, f));
    return rcpp_result_gen;
END_RCPP
}
// IQRout_vec
List IQRout_vec(arma::vec& x, arma::vec& f_vec);
RcppExport SEXP _RHD_IQRout_vec(SEXP xSEXP, SEXP f_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_vec(f_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(IQRout_vec(x, f_vec));
    return rcpp_result_gen;
END_RCPP
}
// rank_rcpp
NumericVector rank_rcpp(arma::vec& x, Rcpp::CharacterVector ties);
RcppExport SEXP _RHD_rank_rcpp(SEXP xSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_rcpp(x, ties));
    return rcpp_result_gen;
END_RCPP
}
// Xsim
arma::mat Xsim(int n, arma::vec& ev, arma::mat& ef, int xi_type, double nu_xi);
RcppExport SEXP _RHD_Xsim(SEXP nSEXP, SEXP evSEXP, SEXP efSEXP, SEXP xi_typeSEXP, SEXP nu_xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< int >::type xi_type(xi_typeSEXP);
    Rcpp::traits::input_parameter< double >::type nu_xi(nu_xiSEXP);
    rcpp_result_gen = Rcpp::wrap(Xsim(n, ev, ef, xi_type, nu_xi));
    return rcpp_result_gen;
END_RCPP
}
// Xout
arma::mat Xout(int n0, arma::vec& tGrid, double eta, int type);
RcppExport SEXP _RHD_Xout(SEXP n0SEXP, SEXP tGridSEXP, SEXP etaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Xout(n0, tGrid, eta, type));
    return rcpp_result_gen;
END_RCPP
}
// Xout_all
cube Xout_all(int n0, arma::vec& tGrid, double eta);
RcppExport SEXP _RHD_Xout_all(SEXP n0SEXP, SEXP tGridSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(Xout_all(n0, tGrid, eta));
    return rcpp_result_gen;
END_RCPP
}
// FPCA
List FPCA(arma::mat& X, arma::vec& tGrid, double fve);
RcppExport SEXP _RHD_FPCA(SEXP XSEXP, SEXP tGridSEXP, SEXP fveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< double >::type fve(fveSEXP);
    rcpp_result_gen = Rcpp::wrap(FPCA(X, tGrid, fve));
    return rcpp_result_gen;
END_RCPP
}
// RKHS
List RKHS(arma::vec& ev, arma::vec& J_vec, int M);
RcppExport SEXP _RHD_RKHS(SEXP evSEXP, SEXP J_vecSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(RKHS(ev, J_vec, M));
    return rcpp_result_gen;
END_RCPP
}
// sort_cpp
List sort_cpp(arma::vec& x);
RcppExport SEXP _RHD_sort_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// RHD_inner
List RHD_inner(arma::mat& x, arma::mat& X, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties, int out_type, int num_M, int stt);
RcppExport SEXP _RHD_RHD_inner(SEXP xSEXP, SEXP XSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP, SEXP out_typeSEXP, SEXP num_MSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< int >::type out_type(out_typeSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    Rcpp::traits::input_parameter< int >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(RHD_inner(x, X, tGrid, ev, ef, ld_mat, J_vec, f_iqr_vec, M_vec, M_type, ties, out_type, num_M, stt));
    return rcpp_result_gen;
END_RCPP
}
// RHD_inner_prob
List RHD_inner_prob(arma::mat& x, arma::mat& X, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::vec& p_vec, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec, Rcpp::CharacterVector ties, int out_type, int num_M, int stt);
RcppExport SEXP _RHD_RHD_inner_prob(SEXP xSEXP, SEXP XSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP p_vecSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP, SEXP tiesSEXP, SEXP out_typeSEXP, SEXP num_MSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< int >::type out_type(out_typeSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    Rcpp::traits::input_parameter< int >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(RHD_inner_prob(x, X, tGrid, ev, ef, p_vec, J_vec, f_iqr_vec, M_vec, ties, out_type, num_M, stt));
    return rcpp_result_gen;
END_RCPP
}
// RHDonly
List RHDonly(arma::mat& x, arma::mat& X, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties, int num_M, int stt);
RcppExport SEXP _RHD_RHDonly(SEXP xSEXP, SEXP XSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP, SEXP num_MSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    Rcpp::traits::input_parameter< int >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(RHDonly(x, X, tGrid, ev, ef, ld_mat, J_vec, M_vec, M_type, ties, num_M, stt));
    return rcpp_result_gen;
END_RCPP
}
// RHDonly_prob
List RHDonly_prob(arma::mat& x, arma::mat& X, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::vec& p_vec, arma::vec& J_vec, arma::vec& M_vec, Rcpp::CharacterVector ties, int num_M, int stt);
RcppExport SEXP _RHD_RHDonly_prob(SEXP xSEXP, SEXP XSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP p_vecSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP tiesSEXP, SEXP num_MSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    Rcpp::traits::input_parameter< int >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(RHDonly_prob(x, X, tGrid, ev, ef, p_vec, J_vec, M_vec, ties, num_M, stt));
    return rcpp_result_gen;
END_RCPP
}
// MC1nd
List MC1nd(int nX, int nY, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties);
RcppExport SEXP _RHD_MC1nd(SEXP nXSEXP, SEXP nYSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nX(nXSEXP);
    Rcpp::traits::input_parameter< int >::type nY(nYSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(MC1nd(nX, nY, tGrid, ev, ef, ld_mat, J_vec, M_vec, M_type, ties));
    return rcpp_result_gen;
END_RCPP
}
// MC1nd_prob
List MC1nd_prob(int nX, int nY, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::vec& prob_vec, arma::vec& J_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties);
RcppExport SEXP _RHD_MC1nd_prob(SEXP nXSEXP, SEXP nYSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP prob_vecSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nX(nXSEXP);
    Rcpp::traits::input_parameter< int >::type nY(nYSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prob_vec(prob_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(MC1nd_prob(nX, nY, tGrid, ev, ef, prob_vec, J_vec, M_vec, M_type, ties));
    return rcpp_result_gen;
END_RCPP
}
// MC2one
List MC2one(int n, int n_out, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties);
RcppExport SEXP _RHD_MC2one(SEXP nSEXP, SEXP n_outSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(MC2one(n, n_out, tGrid, ev, ef, ld_mat, J_vec, M_vec, M_type, ties));
    return rcpp_result_gen;
END_RCPP
}
// MC2one_prob
List MC2one_prob(int n, int n_out, arma::vec& tGrid, arma::vec& ev, arma::mat& ef, arma::vec& prob_vec, arma::vec& J_vec, arma::vec& M_vec, int M_type, Rcpp::CharacterVector ties);
RcppExport SEXP _RHD_MC2one_prob(SEXP nSEXP, SEXP n_outSEXP, SEXP tGridSEXP, SEXP evSEXP, SEXP efSEXP, SEXP prob_vecSEXP, SEXP J_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ev(evSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ef(efSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prob_vec(prob_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(MC2one_prob(n, n_out, tGrid, ev, ef, prob_vec, J_vec, M_vec, M_type, ties));
    return rcpp_result_gen;
END_RCPP
}
// Fadj_inner
cube Fadj_inner(int nSim, arma::mat& covMat, arma::vec& tGrid, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec, int M_type);
RcppExport SEXP _RHD_Fadj_inner(SEXP nSimSEXP, SEXP covMatSEXP, SEXP tGridSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covMat(covMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Fadj_inner(nSim, covMat, tGrid, ld_mat, J_vec, f_iqr_vec, M_vec, M_type));
    return rcpp_result_gen;
END_RCPP
}
// Fadj
cube Fadj(int M_adj, int nSim, arma::mat& covMat, arma::vec& tGrid, arma::mat& ld_mat, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec, int M_type, int num_M, int stt);
RcppExport SEXP _RHD_Fadj(SEXP M_adjSEXP, SEXP nSimSEXP, SEXP covMatSEXP, SEXP tGridSEXP, SEXP ld_matSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP, SEXP M_typeSEXP, SEXP num_MSEXP, SEXP sttSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M_adj(M_adjSEXP);
    Rcpp::traits::input_parameter< int >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covMat(covMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ld_mat(ld_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    Rcpp::traits::input_parameter< int >::type stt(sttSEXP);
    rcpp_result_gen = Rcpp::wrap(Fadj(M_adj, nSim, covMat, tGrid, ld_mat, J_vec, f_iqr_vec, M_vec, M_type, num_M, stt));
    return rcpp_result_gen;
END_RCPP
}
// Fadj_inner_prob
cube Fadj_inner_prob(int nSim, arma::mat& covMat, arma::vec& tGrid, arma::vec& prob_vec, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec);
RcppExport SEXP _RHD_Fadj_inner_prob(SEXP nSimSEXP, SEXP covMatSEXP, SEXP tGridSEXP, SEXP prob_vecSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covMat(covMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prob_vec(prob_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Fadj_inner_prob(nSim, covMat, tGrid, prob_vec, J_vec, f_iqr_vec, M_vec));
    return rcpp_result_gen;
END_RCPP
}
// Fadj_prob
cube Fadj_prob(int M_adj, int nSim, arma::mat& covMat, arma::vec& tGrid, arma::vec& prob_vec, arma::vec& J_vec, arma::vec& f_iqr_vec, arma::vec& M_vec, int num_M);
RcppExport SEXP _RHD_Fadj_prob(SEXP M_adjSEXP, SEXP nSimSEXP, SEXP covMatSEXP, SEXP tGridSEXP, SEXP prob_vecSEXP, SEXP J_vecSEXP, SEXP f_iqr_vecSEXP, SEXP M_vecSEXP, SEXP num_MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M_adj(M_adjSEXP);
    Rcpp::traits::input_parameter< int >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covMat(covMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tGrid(tGridSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prob_vec(prob_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J_vec(J_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_iqr_vec(f_iqr_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type M_vec(M_vecSEXP);
    Rcpp::traits::input_parameter< int >::type num_M(num_MSEXP);
    rcpp_result_gen = Rcpp::wrap(Fadj_prob(M_adj, nSim, covMat, tGrid, prob_vec, J_vec, f_iqr_vec, M_vec, num_M));
    return rcpp_result_gen;
END_RCPP
}
